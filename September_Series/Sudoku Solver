class Solution {
    public boolean isrow(char[][] board, int i, int k) {
        for (int c = 0; c < 9; c++) {
            if (board[i][c] == (char) (k + '0')) {
                return true;
            }
        }
        return false;
    }

    public boolean iscol(char[][] board, int j, int k) {
        for (int r = 0; r < 9; r++) {
            if (board[r][j] == (char) (k + '0')) {
                return true;
            }
        }
        return false;
    }

    public boolean isbox(char[][] board, int i, int j, int k) {
        int sr = 3 * (i / 3);
        int sc = 3 * (j / 3);
        for (int r = 0; r < 3; r++) {
            for (int c = 0; c < 3; c++) {
                if (board[sr + r][sc + c] == (char) (k + '0')) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean solve(char[][] board) {

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    for (int dig = 1; dig <= 9; dig++) {
                        if (!isrow(board, i, dig) && !iscol(board, j, dig) && !isbox(board, i, j, dig)) {
                            board[i][j] = (char) (dig + '0');
                            if (solve(board))
                                return true;
                            board[i][j] = '.';
                        }

                    }
                    return false;
                }
            }
        }
        return true;
    }

    public void solveSudoku(char[][] board) {

        solve(board);
    }
}
