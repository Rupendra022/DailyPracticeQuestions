1. Reverse array in Groups >- GFG PRACTICE 2nd August 

class Solution {
    public static void reverse(int[] arr, int i, int j) {
        while (i < j) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
    }

    public void reverseInGroups(int[] arr, int k) {
        if (arr == null || arr.length == 0 || k <= 0) return;

        for (int i = 0; i < arr.length; i += k) {
            int right = Math.min(i + k - 1, arr.length - 1);
            reverse(arr, i, right);
        }
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. 3rd AUGUST GFG POTD >- 2D DIFFERENCE ARRAY >- 
class Solution {
    public static void helper(int[][] mat , int v , int r1 , int c1 , int r2 , int c2){
        
        for(int i = r1 ; i<=r2 ; i++){
            for(int j = c1 ; j<=c2 ; j++){
                mat[i][j] += v ; 
            }
        }
    }
    public ArrayList<ArrayList<Integer>> applyDiff2D(int[][] mat, int[][] opr) {
        // RADHE RADHE 
        // code here
        
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        
        for(int i = 0 ; i<opr.length ; i++){
            helper(mat,opr[i][0],opr[i][1],opr[i][2],opr[i][3],opr[i][4]);
        }
        
        for(int i = 0 ; i<mat.length ; i++){
           ArrayList<Integer> a = new ArrayList<>();
           for(int j = 0 ; j<mat[0].length ;j++){
               a.add(mat[i][j]);
           }
           ans.add(new ArrayList<>(a));
        }
        
    return ans ;          
    }
}


-------------------------------------------------------------------------------------------------------------------------------------------------
3. LEETCODE POTD 4th AUGUST >- FRUITS INTO BASKET 
class Solution {
    public int totalFruit(int[] fruits) {

        int l = 0;
        int r = 0;
        int maxlen = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        while (r < fruits.length) {
            map.put(fruits[r], map.getOrDefault(fruits[r], 0) + 1);
            if (map.size() > 2) {
                map.put(fruits[l], map.get(fruits[l]) - 1);
                if (map.get(fruits[l]) == 0) {
                    map.remove(fruits[l]);
                }
                l++;
            }

            int curr = r - l + 1;
            maxlen = Math.max(curr, maxlen);
            r++;
        }

        return maxlen;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------
4. GFG POTD 5th AUGUST PALINDROME SENTENCE >- 
class Solution {
    public boolean isPalinSent(String s) {
        // RADHE RADHE 
        // code here
        int i = 0 ; 
        int j = s.length()-1 ;
        
        while(i<j){
            char st = Character.toLowerCase(s.charAt(i));
            char end = Character.toLowerCase(s.charAt(j));
            if(!Character.isLetterOrDigit(st)){
                i++ ; 
            }
            if(!Character.isLetterOrDigit(end)){
                j-- ; 
            }
            
            if(Character.isLetterOrDigit(st) && Character.isLetterOrDigit(end)){
                if(st!=end){
                    return false ; 
                }
                i++ ;
                j-- ; 
            }
        }
        
        return true ;
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------
5. Spriral Traversal of Binary Tree >- 
class Solution {
    public ArrayList<Integer> findSpiral(Node root) {
        // code here
        int count = 0 ; 
        ArrayList<Integer> ans = new ArrayList<>();
        
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty()){
            ArrayList<Integer> ds = new ArrayList<>();
            int sz = q.size();
            for(int i =0 ; i<sz ; i++){
                Node node = q.poll();
                
                    if(node.left!=null) q.add(node.left);
                    if(node.right!=null) q.add(node.right);
                    ds.add(node.data);
                
            }
            if(count%2==0){
            Collections.reverse(ds);
            
            }
            ans.addAll(ds);
            count++ ; 
            
        }
        
        return ans ;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------
